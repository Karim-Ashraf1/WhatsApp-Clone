openapi: 3.0.4
info:
  title: WhatsApps API
  description: |
    This API provides endpoints for authentication, user management, messaging, notifications, and friend requests.
    It supports both RESTful endpoints and WebSocket communication for real-time messaging.
  version: 1.0.0
servers:
  - url: https://whatsapps.com/
tags:
  - name: Authentication
    description: Endpoints for user authentication and registration.
  - name: User Management
    description: Endpoints for managing user profiles and settings.
  - name: Conversations
    description: Endpoints for managing conversations and messages.
  - name: Notifications
    description: Endpoints for handling user notifications.
  - name: Friend Requests
    description: Endpoints for sending and managing friend requests.
  - name: WebSocket
    description: WebSocket connection for real-time messaging and notifications.

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate a user.
      description: Authenticates a user and returns a JWT token for session management.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The user's email address.
                password:
                  type: string
                  description: The user's password.
              required:
                - email
                - password
      responses:
        '200':
          description: Successfully authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authenticated requests.
                  userId:
                    type: string
                    description: The authenticated user's unique identifier.
        '401':
          description: Unauthorized. Invalid credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating invalid credentials.

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user.
      description: Registers a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The full name of the user.
                email:
                  type: string
                  format: email
                  description: The user's email address.
                password:
                  type: string
                  description: The user's password.
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: User successfully registered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    description: Unique identifier for the newly registered user.
                  message:
                    type: string
                    description: Confirmation message.
        '400':
          description: Bad request. Invalid input data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating why registration failed.

  /users/{userId}:
    get:
      tags:
        - User Management
      summary: Get user profile.
      description: Retrieves the profile information of a specific user.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the user.
      responses:
        '200':
          description: User profile retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  onlineStatus:
                    type: boolean
                    description: Indicates if the user is currently online.
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '404':
          description: User not found.
    patch:
      tags:
        - User Management
      summary: Update user profile.
      description: Allows a user to update their profile information.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The full name of the user.
                email:
                  type: string
                  format: email
                  description: The user's email address.
              example:
                name: "John Doe"
                email: "john.doe@example.com"
      responses:
        '200':
          description: User profile updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          description: Invalid input data.
        '404':
          description: User not found.

  /users/{userId}/settings:
    get:
      tags:
        - User Management
      summary: Get user settings.
      description: Retrieves the notification and privacy settings for a user.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the user.
      responses:
        '200':
          description: User settings retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  receiveNotifications:
                    type: boolean
                    description: Whether the user receives notifications.
                  showOnlineStatus:
                    type: boolean
                    description: Whether the userâ€™s online status is visible.
        '404':
          description: User not found.
    patch:
      tags:
        - User Management
      summary: Update user settings.
      description: Allows a user to partially update their notification and privacy settings.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                receiveNotifications:
                  type: boolean
                  description: Whether the user wants to receive notifications.
                showOnlineStatus:
                  type: boolean
                  description: Whether the user wants their online status to be visible.
              example:
                receiveNotifications: true
                showOnlineStatus: false
      responses:
        '200':
          description: User settings updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  receiveNotifications:
                    type: boolean
                  showOnlineStatus:
                    type: boolean
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          description: Invalid input data.
        '404':
          description: User not found.

  /conversations:
    post:
      tags:
        - Conversations
      summary: Create a new conversation.
      description: Initiates a new conversation between users.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                participants:
                  type: array
                  items:
                    type: string
                  minItems: 2
                  description: List of user IDs participating in the conversation.
              required:
                - participants
      responses:
        '201':
          description: Conversation created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversationId:
                    type: string
        '400':
          description: Invalid request.

  /conversations/{conversationId}:
    get:
      tags:
        - Conversations
      summary: Get conversation details.
      description: Retrieves details of a specific conversation, including participants and last message.
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the conversation.
      responses:
        '200':
          description: Conversation details retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversationId:
                    type: string
                  participants:
                    type: array
                    items:
                      type: string
                  lastMessage:
                    type: object
                    properties:
                      senderId:
                        type: string
                      message:
                        type: string
                      timestamp:
                        type: string
                        format: date-time
        '404':
          description: Conversation not found.

  /conversations/{conversationId}/messages:
    get:
      tags:
        - Messages
      summary: Get messages in a conversation.
      description: Retrieves the messages within a specific conversation.
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the conversation.
      responses:
        '200':
          description: Messages retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    messageId:
                      type: string
                    senderId:
                      type: string
                    message:
                      type: string
                    timestamp:
                      type: string
                      format: date-time
        '404':
          description: Conversation not found.
    post:
      tags:
        - Messages
      summary: Send a message.
      description: Sends a message in a conversation.
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the conversation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                senderId:
                  type: string
                message:
                  type: string
              required:
                - senderId
                - message
      responses:
        '201':
          description: Message sent successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
        '400':
          description: Invalid request.
        '404':
          description: Conversation not found.

  /conversations/{conversationId}/messages/{messageId}:
    delete:
      tags:
        - Messages
      summary: Delete a message.
      description: Allows a user to delete their own message.
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the conversation.
        - name: messageId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the message.
      responses:
        '200':
          description: Message deleted successfully.
        '403':
          description: User not authorized to delete this message.
        '404':
          description: Message not found.

  /notifications:
    get:
      tags:
        - Notifications
      summary: Get user notifications.
      description: Retrieves all unread notifications for the user.
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          description: Unique identifier of the user.
      responses:
        '200':
          description: Notifications retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    notificationId:
                      type: string
                    type:
                      type: string
                      enum: [message, friendRequest]
                    content:
                      type: string
                    timestamp:
                      type: string
                      format: date-time
        '404':
          description: No notifications found.

  /notifications/{notificationId}/read:
    post:
      tags:
        - Notifications
      summary: Mark notification as read.
      description: Marks a specific notification as read by the user.
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the notification.
      responses:
        '200':
          description: Notification marked as read successfully.
        '404':
          description: Notification not found.

  /friend-requests:
    post:
      tags:
        - Friend Requests
      summary: Send a friend request.
      description: Sends a friend request from one user to another.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                senderId:
                  type: string
                receiverId:
                  type: string
              required:
                - senderId
                - receiverId
      responses:
        '201':
          description: Friend request sent successfully.
        '400':
          description: Invalid request.
    get:
      tags:
        - Friend Requests
      summary: Get received friend requests.
      description: Retrieves all pending friend requests for a user.
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          description: Unique identifier of the user.
      responses:
        '200':
          description: Friend requests retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    requestId:
                      type: string
                    senderId:
                      type: string
                    timestamp:
                      type: string
                      format: date-time
        '404':
          description: No friend requests found.

  /friend-requests/{requestId}:
    post:
      tags:
        - Friend Requests
      summary: Accept or reject a friend request.
      description: Allows a user to accept or reject a friend request.
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the friend request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [accept, reject]
              required:
                - action
      responses:
        '200':
          description: Friend request processed successfully.
        '404':
          description: Friend request not found.

  /ws:
    get:
      tags:
        - WebSocket
      summary: WebSocket connection for real-time updates.
      description: Establishes a WebSocket connection to receive real-time messages, notifications, and friend requests.
      responses:
        '101':
          description: WebSocket handshake successful.
        '400':
          description: Invalid request.
