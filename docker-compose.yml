version: "3.8"

services:
  frontend:
    build: ./frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api-gateway
    networks:
      - app-network

  api-gateway:
    build: ./api-gateway
    ports:
      - "5000:5000"
    env_file: .env
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    depends_on:
      - user-service
      - message-service
    networks:
      - app-network

  user-service:
    build: ./user-service
    ports:
      - "5001:5001"
    env_file: .env
    volumes:
      - ./user-service:/app
      - /app/node_modules
    depends_on:
      - mongo
    networks:
      - app-network

  message-service:
    build: ./message-service
    ports:
      - "5002:5002"
    env_file: .env
    volumes:
      - ./message-service:/app
      - /app/node_modules
    depends_on:
      - mongo
      - minio
    networks:
      - app-network

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - app-network

  video-compression-service:
    build: ./video-compression-service
    ports:
      - "8080:8080"
    env_file: .env
    volumes:
      - ./video-compression-service:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    networks:
      - app-network

  image-compression-service:
    build: ./backend/Image-Compression-Service
    ports:
      - "8084:8084"
    env_file: .env
    volumes:
      - ./backend/Image-Compression-Service:/usr/src/app
      - /usr/src/app/node_modules
      - ./uploads:/usr/src/app/uploads
    networks:
      - app-network

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}

  mongo-express:
    image: mongo-express:latest
    restart: always
    ports:
      - "8082:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=mongo
    depends_on:
      - mongo
    networks:
      - app-network

  audio-service:
    build: ./backend/Audio-Service
    ports:
      - "5003:5003"
    networks:
      - app-network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "notifications:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - app-network

  notification-service:
    build:
      context: ./backend/kafka-notification-service
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - KAFKA_BROKER=kafka:9092
      - NOTIFICATION_TOPIC=notifications
      - NODE_ENV=development
    depends_on:
      - kafka
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
  redis_data:
  minio-data:
