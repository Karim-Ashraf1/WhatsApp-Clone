version: "3.8"

services:
  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-express:
    image: mongo-express:latest
    restart: always
    ports:
      - "8082:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=mongo
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - app-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    command: redis-server --requirepass A3uug5f1euhk3hqgx1nwiah3od0qoy6nzlego8qgoo8xyda1kb
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  api-gateway:
    build:
      context: ./API-Gateway
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    env_file: .env
    volumes:
      - ./API-Gateway:/app
      - /app/node_modules
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - USER_SERVICE_URL=http://user-service:5001
      - MESSAGE_SERVICE_URL=http://message-service:5002
      - CACHE_SERVICE_URL=http://cache-service:5004
      - FRONTEND_URL=http://frontend:5173
    networks:
      - app-network

  user-service:
    build:
      context: ./backend/User-Service
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    env_file: .env
    volumes:
      - ./backend/User-Service:/app
      - /app/node_modules
    depends_on:
      - api-gateway
      - minio
      - cache-service
    environment:
      - API_GATEWAY_URL=http://api-gateway:5000
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - NODE_ENV=production
      - PORT=5001
    networks:
      - app-network

  message-service:
    build:
      context: ./backend/message-service
      dockerfile: Dockerfile
    ports:
      - "5002:5002"
    env_file: .env
    volumes:
      - ./backend/message-service:/app
      - ./backend/shared-services:/app/shared-services
      - /app/node_modules
    depends_on:
      - api-gateway
      - minio
      - cache-service
    environment:
      - MONGO_URI=mongodb+srv://ahmedtaha4442:YQwGX54nfUFvxcxE@cluster0.k1ibcvj.mongodb.net/message-service?retryWrites=true&w=majority&appName=Cluster0
      - NODE_ENV=production
      - USER_SERVICE_URL=http://user-service:5001
      - FRONTEND_URL=http://frontend:5173
      - API_GATEWAY_URL=http://api-gateway:5000
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - CACHE_SERVICE_URL=http://cache-service:5004
      - PORT=5002
    networks:
      - app-network

  video-compression-service:
    build:
      context: ./backend/Video-Compression-Service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file: .env
    volumes:
      - ./backend/Video-Compression-Service:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    networks:
      - app-network
    environment:
      - PORT=8080

  image-compression-service:
    build:
      context: ./backend/Image-Compression-Service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    env_file: .env
    volumes:
      - ./backend/Image-Compression-Service:/usr/src/app
      - /usr/src/app/node_modules
      - ./uploads:/usr/src/app/uploads
    networks:
      - app-network

  audio-service:
    build:
      context: ./backend/Audio-Service
      dockerfile: Dockerfile
    ports:
      - "5003:5003"
    env_file: .env
    volumes:
      - ./backend/Audio-Service:/app
      - ./uploads:/app/uploads
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api-gateway
      - message-service
    environment:
      - VITE_API_URL=http://localhost:5000
      - VITE_SOCKET_URL=http://message-service:5002
    networks:
      - app-network

  cache-service:
    build:
      context: ./backend/cache-service
      dockerfile: Dockerfile
    ports:
      - "5004:5004"
    env_file: .env
    volumes:
      - ./backend/cache-service:/app
      - /app/node_modules
    depends_on:
      - redis
    environment:
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=A3uug5f1euhk3hqgx1nwiah3od0qoy6nzlego8qgoo8xyda1kb
      - API_GATEWAY_URL=http://api-gateway:5000
      - FRONTEND_URL=http://frontend:5173
      - NODE_ENV=production
      - PORT=5004
    networks:
      - app-network

  # Graylog services
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - app-network

  mongodb:
    image: mongo:4.2
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network

  graylog:
    image: graylog/graylog:4.3
    volumes:
      - graylog_data:/usr/share/graylog/data
    environment:
      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      - GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9000/
    ports:
      - "9000:9000"
      - "12201:12201/udp"
      - "1514:1514"
    depends_on:
      - mongodb
      - elasticsearch
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
  redis_data:
  minio_data:
  elasticsearch_data:
  mongodb_data:
  graylog_data:
