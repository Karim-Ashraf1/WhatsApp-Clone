version: "3.8"

services:
  frontend:
    build: ./frontEnd
    ports:
      - "5173:5173"
    volumes:
      - ./frontEnd:/app
      - /app/node_modules
    depends_on:
      - api-gateway
    networks:
      - app-network

  api-gateway:
    build: ./API-Gateway
    ports:
      - "5000:5000"
    env_file: .env
    volumes:
      - ./API-Gateway:/app
      - /app/node_modules
    depends_on:
      - user-service
      - message-service
      - redis
    networks:
      - app-network

  user-service:
    build: ./backend/user-service
    ports:
      - "5001:5001"
    env_file: .env
    volumes:
      - ./backend/user-service:/app
      - /app/node_modules
    depends_on:
      - mongo
    networks:
      - app-network

  message-service:
    build: ./backend/message-service
    ports:
      - "5002:5002"
    env_file: .env
    volumes:
      - ./backend/message-service:/app
      - /app/node_modules
    depends_on:
      - mongo
    networks:
      - app-network

  video-compression-service:
    build: ./backend/Video-Compression-Service
    ports:
      - "8085:8085"
    env_file: .env
    volumes:
      - ./backend/Video-Compression-Service:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    networks:
      - app-network

  image-compression-service:
    build: ./backend/Image-Compression-Service
    ports:
      - "8084:8084"
    env_file: .env
    volumes:
      - ./backend/Image-Compression-Service:/usr/src/app
      - /usr/src/app/node_modules
      - ./uploads:/usr/src/app/uploads
    networks:
      - app-network

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}

  mongo-express:
    image: mongo-express:latest
    restart: always
    ports:
      - "8082:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_URL=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo:27017/
    depends_on:
      - mongo
    networks:
      - app-network

  audio-service:
    build: ./backend/Audio-Service
    ports:
      - "5003:5003"
    env_file: .env
    volumes:
      - ./backend/Audio-Service:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    networks:
      - app-network

  redis:
    image: redis:latest
    ports:
      - "6378:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # Zookeeper Service - Using existing image
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  # Kafka Service - Using existing image
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "notifications:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

  # Notification Service
  notification-service:
    build: .
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - KAFKA_BROKER=kafka:9092
      - NOTIFICATION_TOPIC=notifications
      - NODE_ENV=development
    depends_on:
      - kafka

  # Kafka Web UI (optional) - Commented out to avoid download issues
  # Uncomment this section if you want to use Kafdrop and have a good internet connection
  # kafdrop:
  #   image: obsidiandynamics/kafdrop
  #   restart: "no"
  #   ports:
  #     - "9000:9000"
  #   environment:
  #     KAFKA_BROKERCONNECT: "kafka:9092"
  #     JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
  #   depends_on:
  #     - kafka

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
  redis_data:
